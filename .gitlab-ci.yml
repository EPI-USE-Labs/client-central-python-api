default:
  image: "python:3.12-alpine"
  cache:
    key: "$CI_COMMIT_REF_SLUG"  # This makes the cache branch-specific
    paths:
      - .cache/pip
      - venv/  # Cache the virtual environment to reuse installed packages

before_script:
  - python -V  # Print out python version for debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

variables:  # Change pip's cache directory to be inside the project directory since we can only cache local items.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

stages:
- test
- release

analysis:
  stage: test
  before_script:
    - pip3 install bandit
  script:
    - bandit -r clientcentral/

release:
  stage: release
  only:
    - master
  variables:
    TWINE_USERNAME: $PYPI_USER
    TWINE_PASSWORD: $PYPI_PASSWORD
  before_script:
    - apk update && apk upgrade
    - apk add git
    - python3 --version
    - pip3 install pip --upgrade 
    - pip3 install twine --upgrade
    - pip3 install build --upgrade
    - pip3 install wheel --upgrade
    - pip3 install Commitizen --upgrade
  script:
    - git remote set-url origin https://${CI_GIT_DEPLOY_USER}:${CI_GIT_DEPLOY_TOKEN}@git.labs.epiuse.com/SWAT/clientcentral-api-python.git
    - git config --global user.email ${GITLAB_USER_EMAIL}
    - git config --global user.name ${GITLAB_USER_NAME}
    - git fetch --tags
    - git checkout master  # Ensure we're on the master branch
    - git pull origin master  # Ensure the local branch is up-to-date
    - git tag
    - cz bump --yes --changelog --changelog-to-stdout
    - git push origin HEAD:master --tags  # Explicitly push to the master branch and include tags
    - python -m build
    - twine upload dist/*