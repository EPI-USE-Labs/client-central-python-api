stages:
  - test
  - bump_version
  - build
  - deploy

default:
  image: "python:3.12-alpine"
  cache:
    key: "$CI_COMMIT_REF_SLUG"  # This makes the cache branch-specific
    paths:
      - .cache/pip
      - venv/  # Cache the virtual environment to reuse installed packages

before_script:
  - apk update && apk upgrade
  - apk add git openssh-client
  - python -V  # Print out python version for debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - 'which ssh-agent || apk add openssh-client'
  - git config --global user.email ${GITLAB_USER_EMAIL}
  - git config --global user.name ${GITLAB_USER_NAME}
  - python3 --version
  - pip3 install pip --upgrade 
  - pip3 install twine --upgrade
  - pip3 install build --upgrade
  - pip3 install wheel --upgrade
  - pip3 install Commitizen --upgrade

variables:  # Change pip's cache directory to be inside the project directory since we can only cache local items.
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

analysis:
  stage: test
  before_script:
    - pip3 install bandit
  script:
    - bandit -r clientcentral/

bump_version:
  stage: bump_version
  only:
    - master
  variables:
    GIT_SSH_COMMAND: 'ssh -o StrictHostKeyChecking=no'
  script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$DEPLOY_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git remote set-url origin git@git.labs.epiuse.com:SWAT/clientcentral-api-python.git
    - git fetch --tags
    - git checkout master  # Ensure we're on the master branch
    - git reset --hard origin/master # Ensure the local branch matches the remote
    - git pull origin master  # Ensure the local branch is up-to-date
    - git tag
    # Run the bump and generate changelog
    - cz bump --yes --changelog --changelog-to-stdout
    # Extract the version from the new tag created by cz
    - TAG=$(git describe --tags --abbrev=0)
    # Push changes and the new tag
    - git push origin master
    - git push origin $TAG
    # Optionally, print the new tag for debugging/logging
    - echo "New version: $TAG"

build:
  stage: build
  script:
    - python -m build

deploy:
  stage: deploy
  only:
    - master
  script:
    - twine check dist/*
    - twine upload --non-interactive -u "__token__" -p "$PYPI_API_TOKEN" dist/*
